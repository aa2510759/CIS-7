#include <iostream>
#include <string>
#include <math.h>
#include <vector>
#include <list>
#include <iterator>

using namespace std;

struct tower
{
	string name;
	list <int> discs;
};

void hanoi(int, tower, tower, tower);
void towerDisplay(tower);

int main()
{
	int num;
	
	tower start;
	start.name = "start";

	tower end;

	end.name = "end";

	tower aux;
	aux.name = "aux";

	cout << "Enter the number of disks : ";
	cin >> num;
	
	for (int i = num; i > 0; i--)
	{
		start.discs.push_back(i);
	}

	towerDisplay(start);
	towerDisplay(end);
	towerDisplay(aux);

	cout << "Press enter to continue.\n";
	cin.ignore();
	cin.ignore();
	system("cls");

	hanoi(num, start, end, aux);
	return 0;
}
void hanoi(int num, tower from, tower to, tower aux)
{
	bool valid = false;

	if (num == 1)
	{
		
		cout << "Move disk " << num << " from tower " << from.name << " to tower " << to.name << endl;

		if (from.discs.empty())
		{
			valid = false;
		}
		else
		{
			valid = true;
		}
		if (valid)
		{
			to.discs.push_front(from.discs.front());
			from.discs.pop_front();
		}

		towerDisplay(from);
		towerDisplay(to);
		towerDisplay(aux);

		cout << "Press enter to continue.\n";
		cin.ignore();
		cin.ignore();
		system("cls");
	}
	else
	{
		hanoi(num - 1, from, to, aux);
	
		cout << "Move disk " << num << " from tower " << from.name << " to tower " << to.name << endl;

		if (from.discs.empty())
		{
			valid = false;
		}
		else
		{
			valid = true;
		}
		if (valid)
		{
			to.discs.push_back(from.discs.back());
			from.discs.pop_back();
		}

		towerDisplay(from);
		towerDisplay(to);
		towerDisplay(aux);

		
		cout << "Press enter to continue.\n";
		cin.ignore();
		cin.ignore();

		system("cls");

		hanoi(num - 1, aux, from, to);
	
	}	
}

void towerDisplay(tower current)
{

	cout << "Tower " << current.name << ": ";
	for (list<int>::const_iterator iterator = current.discs.begin(), end = current.discs.end(); iterator != end; ++iterator)
	{
		if (current.discs.size())
		cout << *iterator <<  " ";	
	}
	cout << endl << endl;
}
